package dao.impl;

import java.util.Date;
import java.util.List;

import model.ArrivalsAddress;
import model.ArrivalsContact;
import model.ArrivalsGroup;
import model.CommonBean;
import model.ExpectedArrivals;
import model.YogaBed;
import model.YogaBuildingRoom;
import model.YogaRoom;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
import org.springframework.stereotype.Repository;

import dao.AccomodationDao;

@Repository
public class AccomodationDaoImpl extends HibernateDaoSupport implements AccomodationDao  {

	@Override
	public void saveOrUpdate(CommonBean commonBean) {
		
		ArrivalsContact contact = new ArrivalsContact();
		contact.setEmailId(commonBean.getEmailId());
		contact.setMobileNumber(commonBean.getMobileNumber());
        getHibernateTemplate().saveOrUpdate(contact);
        
        ArrivalsGroup group = new ArrivalsGroup();
        group.setHeadName(commonBean.getHeadName());
        getHibernateTemplate().saveOrUpdate(group);
        
		
		ExpectedArrivals arrivals = new ExpectedArrivals();
		arrivals.setArrName(commonBean.getArrName());
		arrivals.setArrKarmaYoga(commonBean.getArrKarmaYoga());
		arrivals.setArrSpritualName(commonBean.getArrSpritualName());
		arrivals.setArrSex(commonBean.getArrSex());
		arrivals.setDateOfArrivals(commonBean.getDateOfArrivals());
		arrivals.setDateOfDeparture(commonBean.getDateOfDeparture());
		arrivals.setDateOfBirth(commonBean.getDateOfBirth());
		arrivals.setRoomStatus("NO");
		arrivals.setVacantStatus("YES");
		arrivals.setArrivalsContact(contact);
		arrivals.setArrivalsGroup(group);
		getHibernateTemplate().saveOrUpdate(arrivals);
		
		ArrivalsAddress address = new ArrivalsAddress();
		address.setAddressLine1(commonBean.getAddressLine1());
		address.setAddressLine2(commonBean.getAddressLine2());
		address.setCoutry(commonBean.getCoutry());
		address.setState(commonBean.getState());
		address.setPlace(commonBean.getPlace());
		address.setZipCode(commonBean.getZipCode());
		address.setArrivalsExpectedArrivals(arrivals);
		getHibernateTemplate().saveOrUpdate(address);
		
		
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<YogaBuildingRoom> getAvailableRoom(CommonBean searchBean) {
        DetachedCriteria criteria = DetachedCriteria.forClass(YogaBuildingRoom.class);
        if(!searchBean.getPropertyName().isEmpty()){
        	criteria.createAlias("yogaProperty", "yogaProperty");
    		criteria.add(Restrictions.ilike("yogaProperty.propertyName","%" + searchBean.getPropertyName().toLowerCase().trim() + "%"));
        }
        if(!searchBean.getBuildingName().isEmpty()){
        	criteria.createAlias("yogaBuilding", "yogaBuilding");
    		criteria.add(Restrictions.ilike("yogaBuilding.buildingName","%" + searchBean.getBuildingName().toLowerCase().trim() + "%"));
        }
        if(!searchBean.getRoomNumber().isEmpty()){
        	criteria.createAlias("yogaRoom", "yogaRoom");
    		criteria.add(Restrictions.ilike("yogaRoom.roomNumber","%" + searchBean.getRoomNumber().toLowerCase().trim() + "%"));
        }
        
        criteria.add(Restrictions.eq("vacantStatus", "NO"));
      
        return getHibernateTemplate().findByCriteria(criteria);
		
		
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<ExpectedArrivals> getArrivalsList() {
		DetachedCriteria criteria = DetachedCriteria.forClass(ExpectedArrivals.class);
		criteria.add(Restrictions.ilike("vacantStatus", "YES"));
		criteria.add(Restrictions.ilike("roomStatus", "NO"));
		return getHibernateTemplate().findByCriteria(criteria);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<YogaBuildingRoom> getAvailableRoom(){
		DetachedCriteria criteria = DetachedCriteria.forClass(YogaBuildingRoom.class);
		criteria.add(Restrictions.eq("vacantStatus", "YES"));
		return getHibernateTemplate().findByCriteria(criteria);
		
	}

	@Override
	public void updateBuildingRooms(Long arrId, Long buildingRoomId) {
		YogaBuildingRoom buildingRoom = (YogaBuildingRoom)getHibernateTemplate().get(YogaBuildingRoom.class, buildingRoomId);
		ExpectedArrivals arrivals = (ExpectedArrivals)getHibernateTemplate().get(ExpectedArrivals.class, arrId);
		arrivals.setRoomStatus("YES");
		buildingRoom.setVacantStatus("NO");
		buildingRoom.setExpectedArrivals(arrivals);
		getHibernateTemplate().saveOrUpdate(buildingRoom);
		getHibernateTemplate().saveOrUpdate(arrivals);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<YogaBuildingRoom> getRegisterdList(String name,Date dateOfArrivals){
		
		 DetachedCriteria criteria = DetachedCriteria.forClass(YogaBuildingRoom.class);
		 criteria.createAlias("expectedArrivals", "expectedArrivals");
		 if(null != name && name.length()>0  ){
			 criteria.add(Restrictions.ilike("expectedArrivals.arrName","%" + name.toLowerCase().trim() + "%"));
		 }
		 if(dateOfArrivals!=null){
			 criteria.add(Restrictions.eq("expectedArrivals.dateOfArrivals", dateOfArrivals.clone()));
		 }
		 criteria.add(Restrictions.ilike("vacantStatus", "NO"));
		 criteria.addOrder(Order.desc("expectedArrivals.dateOfArrivals")).addOrder(Order.desc("expectedArrivals.dateOfDeparture"));
		// criteria.add(Restrictions.isNull("confirmation"));
		return getHibernateTemplate().findByCriteria(criteria);
	}
	@Override
	public void roomConfirm(Long id){
		YogaBuildingRoom buildingRoom = (YogaBuildingRoom)getHibernateTemplate().get(YogaBuildingRoom.class, id);
		buildingRoom.setConfirmation("yes");
		getHibernateTemplate().saveOrUpdate(buildingRoom);
		
	}
	@Override
	public YogaBuildingRoom getArrivalsDetails(Long id){
		YogaBuildingRoom buildingRoom = (YogaBuildingRoom)getHibernateTemplate().get(YogaBuildingRoom.class, id);
		return buildingRoom;
	}
	@Override
	public void roomVacant(Long id){
		YogaBuildingRoom buildingRoom = (YogaBuildingRoom)getHibernateTemplate().get(YogaBuildingRoom.class, id);
		buildingRoom.setVacantStatus("YES");
		buildingRoom.setConfirmation(null);
		ExpectedArrivals arrivals = buildingRoom.getExpectedArrivals();
		arrivals.setVacantStatus("yes");
		arrivals.setDateOfDeparture(new Date());
		buildingRoom.setExpectedArrivals(arrivals);
		getHibernateTemplate().saveOrUpdate(buildingRoom);
		
		
	}
	
}
